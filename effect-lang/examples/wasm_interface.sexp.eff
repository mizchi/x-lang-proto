;; WebAssembly Component Model interface definitions

(module WasmInterfaceExample

  ;; WASI filesystem interface
  (pub interface "wasi:filesystem@0.2.0"
    (func open (param i32) (result i32))
    (func read (param i32 i32) (result i32))
    (func write (param i32 i32) (result i32))
    (func close (param i32))
    
    (type descriptor i32)
    (type size i64)
    
    (resource file
      (method constructor create (param i32) (result i32))
      (method static get-size (param i32) (result i64))
      (method read-at (param i32 i64) (result i32))
      (method write-at (param i32 i64) (result i32))))

  ;; Custom computation interface
  (pub interface "compute:math@1.0.0"
    (func add (param f64 f64) (result f64))
    (func multiply (param f64 f64) (result f64))
    (func sqrt (param f64) (result f64))
    
    (resource matrix
      (method constructor new (param i32 i32))
      (method get (param i32 i32) (result f64))
      (method set (param i32 i32 f64))
      (method multiply (param matrix) (result matrix))))

  ;; Import WASI interfaces
  (import (interface "wasi:io/poll@0.2.0") (poll-one poll-list))
  (import (interface "wasi:clocks/wall-clock@0.2.0") (now duration))

  ;; Import core WebAssembly modules
  (import (core "env") (memory malloc free))

  ;; Import specific functions
  (import (func "env" "abort" (param i32)))
  (import (func "console" "log" (param i32)))

  ;; Component-style visibility
  (export (interface "wasi:filesystem@0.2.0") let file-operations
    (record
      (open (lambda (path) (file-open path)))
      (read (lambda (fd size) (file-read fd size)))
      (write (lambda (fd data) (file-write fd data)))
      (close (lambda (fd) (file-close fd)))))

  ;; Pipeline operations with WASI
  (pub let process-file
    (lambda (filename)
      (|> filename
          (field file-operations open)
          (lambda (fd) 
            (tuple fd (call (field file-operations read) fd 1024)))
          (lambda ((fd content))
            (let processed (|> content string-uppercase string-trim))
            (call (field file-operations write) fd processed)
            (call (field file-operations close) fd)
            processed))))

  ;; Memory management helpers
  (pub (crate) let allocate-buffer
    (lambda (size)
      (let ptr (malloc size))
      (if (= ptr 0)
          (abort 1)
          ptr)))

  (pub (crate) let deallocate-buffer
    (lambda (ptr)
      (if (!= ptr 0)
          (free ptr))))

  ;; Component interface implementation
  (pub (component-interface "compute:math@1.0.0") let math-impl
    (record
      (add (lambda (x y) (+ x y)))
      (multiply (lambda (x y) (* x y)))
      (sqrt (lambda (x) (sqrt x)))
      
      (matrix-new (lambda (rows cols) (allocate-buffer (* rows cols 8))))
      (matrix-get (lambda (matrix row col) 0.0))
      (matrix-set (lambda (matrix row col value) unit))))
)