module WasmInterfaceExample

(* WebAssembly Component Model interface definitions *)

(* WASI filesystem interface *)
pub interface "wasi:filesystem@0.2.0" {
  func open (param i32) (result i32)
  func read (param i32 i32) (result i32)
  func write (param i32 i32) (result i32)
  func close (param i32)
  
  type descriptor = i32
  type size = i64
  
  resource file {
    constructor create (param i32) (result i32)
    static get-size (param i32) (result i64)
    read-at (param i32 i64) (result i32)
    write-at (param i32 i64) (result i32)
  }
}

(* Custom computation interface *)
pub interface "compute:math@1.0.0" {
  func add (param f64 f64) (result f64)
  func multiply (param f64 f64) (result f64)
  func sqrt (param f64) (result f64)
  
  resource matrix {
    constructor new (param i32 i32)
    get (param i32 i32) (result f64)
    set (param i32 i32 f64)
    multiply (param matrix) (result matrix)
  }
}

(* Import WASI interfaces *)
import interface "wasi:io/poll@0.2.0" { poll-one, poll-list }
import interface "wasi:clocks/wall-clock@0.2.0" { now, duration }

(* Import core WebAssembly modules *)
import core "env" { memory, malloc, free }

(* Import specific functions *)
import func "env" "abort" (param i32)
import func "console" "log" (param i32)

(* Component-style visibility *)
export interface("wasi:filesystem@0.2.0") let file_operations = {
  open = fun path -> file_open path;
  read = fun fd size -> file_read fd size;
  write = fun fd data -> file_write fd data;
  close = fun fd -> file_close fd;
}

(* Pipeline operations with WASI *)
pub let process_file = fun filename ->
  filename
  |> file_operations.open
  |> fun fd -> (fd, file_operations.read fd 1024)
  |> fun (fd, content) -> 
      let processed = content |> String.uppercase |> String.trim in
      file_operations.write fd processed |> fun _ ->
      file_operations.close fd |> fun _ ->
      processed

(* Memory management helpers *)
pub(crate) let allocate_buffer = fun size ->
  malloc size |> fun ptr -> 
    if ptr = 0 then 
      abort 1 
    else 
      ptr

pub(crate) let deallocate_buffer = fun ptr ->
  if ptr != 0 then free ptr

(* Component interface implementation *)
pub component_interface("compute:math@1.0.0") let math_impl = {
  add = fun x y -> x +. y;
  multiply = fun x y -> x *. y;
  sqrt = fun x -> Float.sqrt x;
  
  matrix_new = fun rows cols -> allocate_buffer (rows * cols * 8);
  matrix_get = fun matrix row col -> (* implementation *) 0.0;
  matrix_set = fun matrix row col value -> (* implementation *) ();
}